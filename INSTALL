Prerequisites
=============

A C++ compiler.

Boost C++ libraries >= 1.50.0
  http://www.boost.org/

libcdio and libiso9660 >= 0.90
  http://www.gnu.org/software/libcdio/

libvcdinfo >= 0.7.24
  http://www.gnu.org/software/vcdimager/


Installation
============

PSXImager can be compiled and installed in the usual way:

  $ ./bootstrap
  $ ./configure
  $ make
  [become root if necessary]
  # make install

Installation is not strictly necessary; the three binaries built in the
"src" directory are stand-alone programs.

Ubuntu 15.04 Installation
=========================
Install autoconf:
  # apt-get install autoconf build-essential

Install boost dev libraries:
  # apt-get install libboost-all-dev

Download the following libraries (not available on stable Ubuntu or Debian at the moment), scroll down and click amd64 or i386 depending on your arch, then pick a download link:
  https://packages.debian.org/experimental/libiso9660-dev
  https://packages.debian.org/experimental/libiso9660-9
  https://packages.debian.org/experimental/libcdio-dev
  https://packages.debian.org/experimental/libcdio15

Install the downloaded packages:
  # dpkg -i lib{cdio,iso}*.deb

Install libvcdinfo:
  # apt-get install libvcdinfo0 libvcdinfo-dev

Now configure should work:
  $ ./configure --with-boost-libdir=/usr/lib/x86_64-linux-gnu
  
If you want a static build (to copy the executables and run on other Linux without worrying about dependencies):
  $ ./configure --with-boost-libdir=/usr/lib/x86_64-linux-gnu LDFLAGS="-static" LIBS="-lpthread"

Compile:
  $ make

Compiled files are under src/:
  $ ls src/psx{build,inject,rip}
  src/psxbuild  src/psxinject  src/psxrip

Docker compilation and usage
============================
  $ git clone https://github.com/tatref/psximager
  $ cd psximager
  $ docker build -t psximager .

To grab the binaries on your host (these will be under ./bin/)
  $ docker run -v $PWD/bin:/psximager/bin psximager /bin/bash -c "cd /usr/local/bin/ && cp psxbuild psxinject psxrip /psximager/bin/"
  $ ./bin/psxrip ...

You can also use the commands via docker, if you use volumes
  $ docker run --rm -it \
      -v $PWD/dump:/dump \                          #Â the dump will be there
      -v $HOME/CTR.bin:/cdrom.bin:ro \              # source cdrom
      -v $HOME/CTR.cue:/cdrom.cue:ro \              # cue
      psximager \
      psxrip --lbn-table --verbose /cdrom.bin       # command to run
